/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    template: `## {{chairman_name}}\n{{location}}\n> [Twitter]({{url}})`,
    // apiKey: "",
    // maxDefinitions: 5,
};
class WordnikPlugin extends obsidian.Plugin {
    getApiUrl(title) {
        return "https://rickies.co/api/chairmen.json";
    }
    getRelatedApiUrl(title) {
        return "https://api.wordnik.com/v4/word.json/" + encodeURIComponent(title) + "/relatedWords?useCanonical=false&limitPerRelationshipType=10&api_key=" + this.settings.apiKey;
    }
    formatExtractText(extract, searchTerm) {
        var textToReturn = "";
        for (var i = 0; i < extract.text.length; i++) {
            if (i < this.settings.maxDefinitions) {
                textToReturn += extract.text[i] + "\n";
            }
        }
        return textToReturn;
    }
    formatRelatedWordsText(extract, searchTerm) {
        var textToReturn = "";
        for (var i = 0; i < extract.text.length; i++) {
            textToReturn += extract.text[i] + "\n";
        }
        return textToReturn;
    }
    handleNotFound(searchTerm) {
        new obsidian.Notice(`${searchTerm} not found in the wordnik database.`);
    }
    parseResponse(json, title) {
        // for (let i = 0; i < Number(json["length"]); i++) {
        //   definitions.push("*" + json[i]["partOfSpeech"] + "*: " + json[i]["text"])
        // }
        console.log("one or two:");
        console.log(title);
        let chairman_version = "annual_chairman";
        if (title == "2") {
            chairman_version = "keynote_chairman";
        }
        const extract = {
            title: "word",
            text: "test",
            name: json[chairman_version]["name"],
            last_name: json[chairman_version]["last_name"],
            twitter: json[chairman_version]["twitter"],
            location: json[chairman_version]["location"],
            url: "test",
        };
        console.log("definitions extract: ");
        console.log(extract);
        return extract;
    }
    parseRelatedResponse(json) {
        const lines = [];
        var typesOfRelation = "| ";
        var dashes = "|";
        var allRelatedWords = [[], [], [], [], [], [], [], [], [], []];
        var relatedWordsLengths = [];
        for (let i = 0; i < json["length"]; i++) {
            typesOfRelation += json[i]["relationshipType"] + " |";
            dashes += " --- |";
            relatedWordsLengths.push(json[i]["words"].length);
        }
        for (let i = 0; i < Math.max(...relatedWordsLengths); i++) {
            for (let j = 0; j < json["length"]; j++) {
                if (json[j]["words"][i] != undefined) {
                    allRelatedWords[i].push(json[j]["words"][i]);
                }
                else {
                    allRelatedWords[i].push("");
                }
            }
        }
        lines.push(typesOfRelation);
        lines.push(dashes);
        for (let i = 0; i < allRelatedWords.length; i++) {
            lines.push("| " + allRelatedWords[i].join(" | ") + " |");
        }
        const extract = {
            title: "word",
            text: lines,
            url: ""
        };
        console.log("related extract: ");
        console.log(extract);
        return extract;
    }
    formatExtractInsert(extract, searchTerm) {
        this.formatExtractText(extract, searchTerm);
        // const relatedWordsText = this.formatRelatedWordsText(relatedExtract, searchTerm);
        const template = this.settings.template;
        console.log("thtoahsuenthllogoooLLOGOLOGLOG");
        console.log(extract.name);
        let chairman_version = "Annual Chairman";
        if (searchTerm == "2") {
            chairman_version = "Keynote Chairman";
        }
        const formattedTemplate = template
            .replace("{{location}}", "from " + extract.location)
            // .replace("{{relatedWords}}", relatedWordsText)
            .replace("{{chairman_name}}", extract.name + " " + extract.last_name + " (" + chairman_version + ")")
            .replace("{{url}}", extract.twitter);
        return formattedTemplate;
    }
    getWordnikText(title) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.getApiUrl(title);
            console.log("definitions url: ");
            console.log(url);
            const requestParam = {
                url: url,
            };
            const resp = yield obsidian.request(requestParam)
                .then((r) => JSON.parse(r))
                .catch(() => new obsidian.Notice("Failed to get Wordnik data. Check your internet connection."));
            console.log("definitions resp: ");
            console.log(resp["annual_chairman"]);
            const extract = this.parseResponse(resp, title);
            console.log("this is the extract getWordnikText() returns");
            console.log(extract);
            return extract;
        });
    }
    getRelatedWords(title) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.getRelatedApiUrl(title);
            console.log("related url: ");
            console.log(url);
            const requestParam = {
                url: url,
            };
            const resp = yield obsidian.request(requestParam)
                .then((r) => JSON.parse(r))
                .catch(() => new obsidian.Notice("Failed to get Wordnik data. Check your internet connection."));
            console.log("related resp: ");
            console.log(resp);
            const extract = this.parseRelatedResponse(resp);
            return extract;
        });
    }
    pasteIntoEditor(editor, searchTerm) {
        return __awaiter(this, void 0, void 0, function* () {
            let extract = yield this.getWordnikText(searchTerm);
            // let relatedExtract: WordnikExtract = await this.getRelatedWords(searchTerm);
            console.log("FROM PASTE INTO EDITOR");
            console.log(extract.text);
            // console.log(relatedExtract.text);
            if (!extract) {
                this.handleNotFound(searchTerm);
                return;
            }
            editor.replaceSelection(this.formatExtractInsert(extract, searchTerm));
        });
    }
    getWordnikTextForActiveFile(editor) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeFile = yield this.app.workspace.getActiveFile();
            if (activeFile) {
                const searchTerm = activeFile.basename;
                if (searchTerm) {
                    yield this.pasteIntoEditor(editor, searchTerm);
                }
            }
        });
    }
    getWordnikTextForSearchTerm(editor) {
        return __awaiter(this, void 0, void 0, function* () {
            new WikipediaSearchModal(this.app, this, editor).open();
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            // this.addCommand({
            //   id: "wordnik-get-active-note-title",
            //   name: "Get Wordik data for Active Note Title",
            //   editorCallback: (editor: Editor) =>
            //     this.getWordnikTextForActiveFile(editor),
            // });
            this.addCommand({
                id: "rickies-get-annual-chairman",
                name: "Paste annual chairman",
                editorCallback: (editor) => this.getWordnikTextForSearchTerm(editor),
            });
            this.addSettingTab(new WikipediaSettingTab(this.app, this));
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class WikipediaSearchModal extends obsidian.Modal {
    constructor(app, plugin, editor) {
        super(app);
        this.plugin = plugin;
        this.editor = editor;
    }
    onOpen() {
        let { contentEl } = this;
        contentEl.createEl("h2", { text: "Annual chairman (1) or keynote chairman (2)?" });
        const inputs = contentEl.createDiv("inputs");
        const searchInput = new obsidian.TextComponent(inputs).onChange((searchTerm) => {
            this.searchTerm = searchTerm;
        });
        searchInput.inputEl.focus();
        searchInput.inputEl.addEventListener("keydown", (event) => {
            if (event.key === "Enter") {
                this.close();
            }
        });
        const controls = contentEl.createDiv("controls");
        const searchButton = controls.createEl("button", {
            text: "Search",
            cls: "mod-cta",
            attr: {
                autofocus: true,
            },
        });
        searchButton.addEventListener("click", this.close.bind(this));
        const cancelButton = controls.createEl("button", { text: "Cancel" });
        cancelButton.addEventListener("click", this.close.bind(this));
    }
    onClose() {
        return __awaiter(this, void 0, void 0, function* () {
            let { contentEl } = this;
            contentEl.empty();
            if (this.searchTerm) {
                yield this.plugin.pasteIntoEditor(this.editor, this.searchTerm);
            }
        });
    }
}
class WikipediaSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Obsidian Wordnik" });
        new obsidian.Setting(containerEl)
            .setName("Wordnik Extract Template")
            .setDesc(`Set markdown template for extract to be inserted.\n
        Available template variables are {{location}}, {{chairman_name}}, and {{url}}.
        `)
            .addTextArea((textarea) => textarea
            .setValue(this.plugin.settings.template)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.template = value;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = WordnikPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
